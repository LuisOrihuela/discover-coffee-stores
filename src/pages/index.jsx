import Head from "next/head";
import Image from "next/image";
import { IBM_Plex_Sans } from "next/font/google";
import styles from "@/styles/Home.module.css";
import Banner from "@/components/Banner/banner";
import Card from "@/components/Card/Card";
import { fetchCoffeeStores } from "@/lib/coffee-stores";
import { FALLBACK_IMG } from "@/constants";
import useTrackLocation from "@/hooks/use-track-location";
import { useContext, useEffect, useState } from "react";
import { ACTION_TYPES, StoreContext } from "@/store/storeContext";

const ibmPlexSans = IBM_Plex_Sans({
  weight: ["400", "500", "700"],
  subsets: ["latin"],
  style: "normal",
});

export async function getStaticProps() {
  const coffeeStores = await fetchCoffeeStores();

  return {
    props: {
      coffeeStores,
    },
  };
}

export default function Home(props) {
  const { dispatch, state } = useContext(StoreContext);
  const { coffeeStores } = state;
  const [coffeeStoresError, setCoffeeStoresError] = useState();
  const { handleTrackLocation, isLoading, latLong, locationErrorMsg } =
    useTrackLocation();
  const handleOnBannerBtnClick = () => {
    handleTrackLocation();
  };

  useEffect(() => {
    async function fetchStores() {
      if (latLong) {
        try {
          const response = await fetch(
            `/api/getCoffeeStoresByLocation?latLong=${latLong}&limit=30`
          );
          const coffeeStores = await response.json();
          dispatch({
            type: ACTION_TYPES.SET_COFFEE_STORES,
            payload: coffeeStores,
          });
          setCoffeeStoresError("");
        } catch (error) {
          setCoffeeStoresError(error.message);
          console.error(error);
        }
      }
    }
    fetchStores();
  }, [latLong, dispatch]);

  return (
    <>
      <Head>
        <title>Coffee Connoisseur</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={[ibmPlexSans.className, styles.main].join(" ")}>
        <Banner
          buttonText={isLoading ? "Locating..." : "View stores nearby"}
          handleOnClick={handleOnBannerBtnClick}
        />
        {locationErrorMsg && (
          <span>Something went wrong: {locationErrorMsg}</span>
        )}
        {coffeeStoresError && (
          <span>Something went wrong: {coffeeStoresError}</span>
        )}
        <div className={styles.heroImage}>
          <Image
            src="/static/hero-image.png"
            alt="hero"
            width={700}
            height={400}
          />
        </div>
        {coffeeStores?.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Stores near me</h2>
            <div className={styles.cardLayout}>
              {coffeeStores.map(({ name, id, imgUrl }) => (
                <Card
                  key={id}
                  className={styles.card}
                  name={name}
                  imgUrl={imgUrl || FALLBACK_IMG}
                  href={`/coffee-store/${id}`}
                />
              ))}
            </div>
          </div>
        )}
        {!coffeeStores.length && props.coffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Toronto stores</h2>
            <div className={styles.cardLayout}>
              {props.coffeeStores.map(({ name, id, imgUrl }) => (
                <Card
                  key={id}
                  className={styles.card}
                  name={name}
                  imgUrl={imgUrl || FALLBACK_IMG}
                  href={`/coffee-store/${id}`}
                />
              ))}
            </div>
          </div>
        )}
      </main>
    </>
  );
}
